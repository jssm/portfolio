{"version":3,"sources":["images/white_logo.png","images/photo.jpeg","components/NavBar/NavBar.js","components/About/About.js","components/Body/Body.js","components/Footer/Footer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","src","logo_image","alt","href","Header","photo_image","Body","Footer","target","rel","icon","faLinkedin","size","faGithub","App","props","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,yRC2B5BC,MAnBf,WACE,OACE,yBAAKC,UAAU,WACb,yBAAKC,IAAKC,IAAYF,UAAU,OAAOG,IAAI,eAC3C,yBAAKH,UAAU,iBACb,uBAAGI,KAAK,GAAGJ,UAAU,gBAArB,SAGA,uBAAGI,KAAK,GAAGJ,UAAU,gBAArB,oBAGA,uBAAGI,KAAK,GAAGJ,UAAU,gBAArB,e,yBCGOK,MAdf,WACE,OACE,yBAAKL,UAAU,oBACb,yBAAKC,IAAKK,IAAaN,UAAU,WAAWG,IAAI,OAChD,yBAAKH,UAAU,eACb,wBAAIA,UAAU,qBAAd,2BACA,wBAAIA,UAAU,2BAAd,qE,YCHOO,I,cCwBAC,MAzBf,WACE,OACE,yBAAKR,UAAU,cACb,yBAAKA,UAAU,cACb,uBACEA,UAAU,mBACVI,KAAK,iDACLK,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBC,KAAMC,IAAYC,KAAK,QAE1C,uBACEb,UAAU,mBACVI,KAAK,0BACLK,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBC,KAAMG,IAAUD,KAAK,WCJjCE,E,YAhBb,WAAYC,GAAQ,qEACZA,I,sEAIN,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,W,GAXUC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a3fc57e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/white_logo.22729f3e.png\";","module.exports = __webpack_public_path__ + \"static/media/photo.e8150566.jpeg\";","import React from \"react\";\nimport logo_image from \"../../images/white_logo.png\";\n// Import the BrowserRouter, Route and Link components\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\n// Import css files\nimport \"../App/App.css\";\nimport \"./NavBar.css\";\n\nfunction NavBar() {\n  return (\n    <div className=\"nav-bar\">\n      <img src={logo_image} className=\"logo\" alt=\"Logo Image\" />\n      <div className=\"nav-bar-items\">\n        <a href=\"\" className=\"nav-bar-item\">\n          About\n        </a>\n        <a href=\"\" className=\"nav-bar-item\">\n          Curriculum Vitae\n        </a>\n        <a href=\"\" className=\"nav-bar-item\">\n          Projects\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport \"../App/App.css\";\nimport \"./About.css\";\nimport photo_image from \"../../images/photo.jpeg\";\n\n//This component is simple enough to just have a render() method,\n//so it can be a funcional component (simply return the JSX code to render)\n\nfunction Header() {\n  return (\n    <div className=\"header-container\">\n      <img src={photo_image} className=\"my-photo\" alt=\"JM\" />\n      <div className=\"header-text\">\n        <h2 className=\"header-grid-hello\">Hello! My name is Joana</h2>\n        <h4 className=\"header-grid-description\">\n          I'm a Software Engineer who loves to get insights out of data.\n        </h4>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"../App/App.css\";\nimport \"./Body.css\";\n\n//This component is simple enough to just have a render() method,\n//so it can be a funcional component (simply return the JSX code to render)\n\nfunction Body() {\n  return <div className=\"large-test-chunk\">Body is here</div>;\n}\n\nexport default Body;\n","import React from \"react\";\nimport \"../App/App.css\";\nimport \"./Footer.css\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLinkedin, faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\n//This component is simple enough to just have a render() method,\n//so it can be a funcional component (simply return the JSX code to render)\n\nfunction Footer() {\n  return (\n    <div className=\"footer-bar\">\n      <div className=\"icons-list\">\n        <a\n          className=\"social-media-app\"\n          href=\"https://www.linkedin.com/in/joana-sofia-matos/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <FontAwesomeIcon icon={faLinkedin} size=\"2x\" />\n        </a>\n        <a\n          className=\"social-media-app\"\n          href=\"https://github.com/jssm\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <FontAwesomeIcon icon={faGithub} size=\"2x\" />\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport NavBar from \"../NavBar/NavBar\";\nimport About from \"../About/About\";\nimport Body from \"../Body/Body\";\nimport Footer from \"../Footer/Footer\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar />\n        <About />\n        {/* <Body /> */}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}